{"version":3,"sources":["styles/logo1.png","context/BoardContext.js","components/Title.js","components/Nav.js","components/Players.js","components/Games.js","components/Match.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BoardContext","createContext","BoardContextProvider","props","useState","count","setCount","match","setMatch","players","setPlayers","games","setGames","useEffect","data","Provider","value","addPlayerToMatch","e","name","target","parentNode","firstChild","innerHTML","console","log","map","player","obj","id","avatar","add","item","score","gameSetMatch","Date","toISOString","children","Title","title","h1","className","initial","opacity","animate","transition","duration","Nav","class","src","logo","width","height","alt","Players","useContext","settings","dots","infinite","speed","autoplay","slidesToShow","slidesToScroll","Fragment","key","div","scale","filter","game","player1","length","player2","onClick","Games","CheckID","scope","date","toDateString","reverse","Match","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71b487b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo1.456d654a.png\";","import React, { createContext, useState, useEffect } from 'react'\nimport data from './data.json'\n\nexport const BoardContext = createContext();\n\nconst BoardContextProvider = (props) => {\n    const [count, setCount] = useState(1)\n    const [match, setMatch] = useState([])\n    const [players, setPlayers] = useState([])\n    const [games, setGames] = useState([])\n    \n\n    useEffect(()=>{\n      setPlayers(data.players)\n      setGames(data.games)\n    }, [])\n\n\n    const add = (item) => {\n        item.score += 1\n        setMatch(match => [...match], match)\n    }\n\n    const gameSetMatch = () => {\n        var d = new Date();\n        var n = d.toISOString();\n        const obj = {\n                \"date\": n,\n                \"player1\": {\n                    \"id\": match[0].id,\n                    \"score\": match[0].score\n                },\n                \"player2\": {\n                    \"id\": match[1].id,\n                    \"score\": match[1].score\n                }\n            }\n\n            setGames(games => [...games, obj])\n            setMatch([])\n            setCount(1)\n        }\n    \n\n    const addPlayerToMatch = (e) => {\n         if (count < 3) {\n             const name = e.target.parentNode.firstChild.innerHTML\n             console.log(name)\n             data.players.map(player => {\n                 if (name === player.name) {\n                     const obj = {\n                         \"id\": player.id,\n                         \"name\": player.name,\n                         \"avatar\": player.avatar,\n                         \"score\": 0\n                     }\n                     setMatch(match => [...match, obj])\n\n                 }\n             })\n         }\n\n\n         setCount(count + 1)\n    }\n\n\n    return (\n        <BoardContext.Provider value={{ players,games, addPlayerToMatch, match, add, count, gameSetMatch}}>\n            {props.children}\n        </BoardContext.Provider>\n    )\n}\nexport default BoardContextProvider;","import React from 'react';\nimport { motion } from \"framer-motion\"\n\nconst Title = ({title}) => {\n    return (\n        <motion.h1 className=\"ribbon\"\n        initial = { { opacity: 0 } }\n        animate={{ opacity: 1}}\n        transition={{ duration: 0.5 }}\n        >\n            <strong className=\"ribbon-content\">{title}</strong>\n        </motion.h1>\n    )\n}\n\nexport default Title","import React from 'react';\nimport logo from '../styles/logo1.png';\n\nconst Nav = () => {\n    return (\n        <nav class=\"navbar navbar-dark bg-dark-custom\">\n            <div class=\"navbar-brand-custom mx-auto\">\n                <img src={logo} width=\"95\" height=\"95\" class=\"d-inline-block align-top\" alt=\"img-logo\" />\n            </div>\n        </nav>\n    )\n}\n\nexport default Nav","import React, { useContext } from 'react';\nimport Slider from \"react-slick\";\nimport Title from './Title';\nimport Nav from './Nav';\nimport { BoardContext } from '../context/BoardContext.js'\nimport { motion } from \"framer-motion\"\n\n\n\nfunction Players() {\n    const { addPlayerToMatch, players, count, games } = useContext(BoardContext)\n    var settings = {\n        dots: true,\n        infinite: true,\n        speed: 2000,\n        autoplay: true,\n        slidesToShow: 4,\n        slidesToScroll: 4\n    };\n    return (\n        <div>\n            {\n                count === 3 ? (<Nav/>) : (\n                    <React.Fragment>\n                        {\n                          count === 2 ? <Title title=\"Select another player\" /> :      <Title title=\"Player Selection\" />\n                        }\n                   \n                        <div className=\"mb-3\">\n                            <Slider {...settings}>\n\n                                {players.map((player, key) => {\n                                    return (\n                                        <motion.div className=\"card col-md-12\" key={key} \n                                        initial = { { scale: 0.3 } }\n                                        animate={{ scale: 1 }}\n                                        transition={{ duration: 0.5 }}\n\n                                        >\n                                            <img src={player.avatar} className=\"card-img-top\" alt=\"...\" />\n                                            <div className=\"card-body\">\n                                                <h5 className=\"card-title\">{player.name}</h5>\n                                                <p className=\"card-title\"><i className=\"far fa-user\"></i> Player Stats</p>\n                                                <p className=\"text-muted mb-0\"><i className=\"fas fa-table-tennis\"></i> Games: {games.filter(game => game.player1.id === player.id).length}</p>\n                                                <p className=\"text-muted mb-0\"><i className=\"fas fa-trophy\"></i> Won: {games.filter(game => game.player1.id === player.id && game.player1.score > game.player2.score).length}</p>\n                                                <p className=\"text-muted mb-3\"> <i className=\"fas fa-frown\"></i> Lost: {games.filter(game => game.player1.id === player.id && game.player1.score < game.player2.score).length}</p>\n                                                <button onClick={addPlayerToMatch} className=\"btn btn-outline-dark\">Play</button>\n                                            </div>\n                                        </motion.div>\n                                    )\n                                })\n\n                                }\n                            </Slider>\n                        </div>\n                    </React.Fragment>\n                )\n            }\n\n\n        </div>\n\n    );\n}\n\nexport default Players;","import React, { useContext } from 'react';\nimport { BoardContext } from '../context/BoardContext.js'\nimport Title from './Title';\nimport { motion } from \"framer-motion\"\n\nfunction ConvertDate(date) {\n    const d = new Date(date)\n    return d.toDateString()\n}\n\n\nfunction Games() {\n    const { games, players } = useContext(BoardContext)\n    const CheckID = (id) => {\n        return players.map(player => {\n            if (player.id === id) {\n                return player.name\n            }\n        })\n\n\n    }\n\n    return (\n        <div>\n             <Title title=\"Match Results\" />\n            <div className=\"table-wrapper-scroll-y my-custom-scrollbar\">\n                <table className=\"table table-dark\">\n                    <thead>\n                        <tr>\n\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Player 1</th>\n                            <th scope=\"col\">V</th>\n                            <th scope=\"col\">Player 2</th>\n                            <th scope=\"col\">Winner</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            games.map((game, key) => {\n                                return (\n                                    <React.Fragment key={key}>\n                                        <tr>\n                                            <th scope=\"row\">{ConvertDate(game.date)}</th>\n                                            <td>{CheckID(game.player1.id)} <small>({(game.player1.score)})</small> </td>\n                                            <td>v</td>\n                                            <td>{CheckID(game.player2.id)} <small>({(game.player2.score)})</small></td>\n                                            <td>{game.player1.score > game.player2.score ? CheckID(game.player1.id) : CheckID(game.player2.id)} </td>\n                                        </tr>\n                                    </React.Fragment>\n                                )\n                            }).reverse()\n                        }\n                    </tbody>\n                </table>\n                </div>\n            </div >\n\n    );\n}\n\nexport default Games;","import React, { useContext } from 'react';\nimport { BoardContext } from '../context/BoardContext.js'\nimport Title from './Title';\nimport { motion } from \"framer-motion\"\n\n\nfunction Match() {\n    const { match, add, gameSetMatch } = useContext(BoardContext)\n\n    return (\n        <div>\n            {\n                match.length === 0 ? (<div></div>) : (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                        <Title title=\"Table Tennis Match\" />\n                            <motion.div className=\"row\"\n                             initial = { { opacity: 0 } }\n                             animate={{ opacity: 1}}\n                             transition={{ duration: 0.5 }}>\n                                {\n                                    match.map((item, key) => {\n                                        return (\n                                            <div className=\"col-md-6 match\" key={key}>\n                                                <img src={item.avatar} alt=\"image\" />\n                                                <h2 className=\"match-name\"> {item.name} </h2>\n                                                <div className=\"score-number\">{item.score} </div>\n                                                <div><button className=\"btn btn-success\" onClick={() => add(item)}>+</button></div>\n                                            </div>\n                                        )\n                                    })\n                                }\n                               \n                            </motion.div>\n                            <div className=\"position-relative vs\">Vs</div>\n                            <button className=\"position-relative btn btn-danger game-set\" onClick={gameSetMatch}>GAME SET MATCH</button>\n                        </div>\n                    </React.Fragment>\n\n                )\n\n            }\n        </div>\n    );\n}\n\nexport default Match;","import React from 'react';\nimport BoardContext from '../context/BoardContext.js';\nimport Players from './Players.js'\nimport Games from './Games.js'\nimport Match from './Match'\nimport \"../index.css\"\n\nfunction App() {\n  return (\n    <BoardContext>\n      <div className=\"container\">\n        <Players />\n        <Match />\n        <Games />\n      </div>\n    </BoardContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}